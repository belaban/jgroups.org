<project name="build-site" default="docs" basedir=".">

    <property name="build.properties.file" value="build.properties"/>
    <property file="${build.properties.file}"/>
    <property name="project.name"         value="site"/>
    <property name="docs.src"             value="xdocs"/>
    <property name="build.dir"            value="build"/>
    <property name="movies.dir"           value="movies"/>
    <property name="html.dir"             value="html"/>
    <property name="perf.dir"             value="perf"/>
    <property name="papers.dir"           value="papers"/>
    <property name="hsqldbr.dir"          value="hsqldbr"/>
    <property name="jgroups.dir"          value="../JGroups"/>
    <property name="jgroups.articles.dir" value="../JGroupsArticles"/>
    <property name="jnlp.dir"             value="jnlp"/>


    <path id="classpath">
        <fileset dir="./lib">
            <include name="**/*.jar"/>
            <!--include name="${jgroups.dir}/lib/*.jar"/-->
        </fileset>
    </path>


    <target name="check-jgroups" description="Checks whether the ${jgroups.dir} dir exists">
        <available file="${jgroups.dir}" type="dir" property="jgroups.exists"/>
    </target>

    <target name="check-jgroups-articles" description="Checks whether the ${jgroups.articles.dir} dir exists">
        <available file="${jgroups.articles.dir}" type="dir" property="jgroups.articles.exists"/>
    </target>

    <target name="check-jgroups-schema" description="Checks whether the ${jgroups.dir}/classes/schema dir exists">
        <available file="${jgroups.dir}/classes/schema" type="dir" property="jgroups.schema.exists"/>
    </target>

    <target name="prepare">    
        <mkdir dir="build"/>
        <available classname="org.apache.velocity.anakia.AnakiaTask" property="AnakiaTask.present">
            <classpath refid="classpath"/>
        </available>
        <copy file="${build.properties.file}.template" tofile="${build.properties.file}" overwrite="false"/>
    </target>

    <target name="prepare-error" depends="prepare" unless="AnakiaTask.present">
        <echo>
            AnakiaTask is not present! Please check to make sure that velocity.jar is in your classpath.
        </echo>
    </target>

    <target name="docs" depends="prepare-error" if="AnakiaTask.present"
            description="Render HTML Pages via Anakia">
        <taskdef name="anakia" 
                 classname="org.apache.velocity.anakia.AnakiaTask">
            <classpath refid="classpath"/>
        </taskdef>
        <anakia basedir="${docs.src}" destdir="${build.dir}/"
                extension=".html" style="./site.vsl"
                projectFile="stylesheets/project.xml"
                excludes="**/stylesheets/** empty.xml"
                includes="**/*.xml"
                lastModifiedCheck="true"
                templatePath="./xdocs/stylesheets">
        </anakia>

        <echo message="Copying directories to ${build.dir}:"/>
        <copyDirectory from="${docs.src}/images" to="${build.dir}/images"/>

        <copyDirectory from="${html.dir}" to="${build.dir}"/>

        <copyDirectory from="${movies.dir}" to="${build.dir}/movies"/> 

        <copyDirectory from="${perf.dir}" to="${build.dir}/perf"/>

        <copyDirectory from="${papers.dir}" to="${build.dir}/papers"/>

        <copyDirectory from="${hsqldbr.dir}" to="${build.dir}/hsqldbr"/>

        <antcall target="copy-schema" description="Copies the schema dir to build/schema"/>

        <antcall target="copy-articles" description="Copies articles from JGroupsArticles"/>

        <antcall target="copy-javadoc" description="Generates and copies the javadoc to the build dir"/>

        <antcall target="copy-manual" description="Copies the manual to build/manual"/>

        <antcall target="copy-tutorial" description="Copies the tutorial to build/tutorial"/>

        <copyDirectory from="${jnlp.dir}" to="${build.dir}/jnlp"/>

        <delete>
            <fileset dir="." defaultexcludes="no">
                <include name="**/*~"/>
                <include name="velocity*.log*"/>
            </fileset>
        </delete>

    </target>



    <target name="copy-javadoc" if="jgroups.exists" depends="check-jgroups"
            description="Generates JGroups/dist/javadoc and copies it to ./build if the JGroups directory is found ">
        <ant dir="${jgroups.dir}" antfile="${jgroups.dir}/build.xml" target="javadoc" inheritall="false"/>
        <copyDirectory from="${jgroups.dir}/dist/javadoc" to="${build.dir}/javadoc"/>
    </target>


    <target name="copy-schema" depends="check-jgroups-schema"
            description="Checks whether JGroups/schema/JGroups-X.Y.xsd exists and and copies it to ./build ">
        <!--ant dir="${jgroups.dir}" antfile="${jgroups.dir}/build.xml" target="create-schema" inheritall="false"/-->
        <fail unless="jgroups.schema.exists" message="${jgroups.dir}/classes/schema doesn't exist, please execute create-schema in ${jgroups.dir}"/>
        <copyDirectory from="${jgroups.dir}/classes/schema" to="${build.dir}/schema"/>
    </target>



    <target name="copy-articles" if="jgroups.articles.exists" depends="check-jgroups-articles"
            description="Copies various articles from JGroupsArticles to ./build">

        <!-- Memcached -->
        <copy todir="${build.dir}/memcached">
            <fileset dir="${jgroups.articles.dir}/Memcached">
                <exclude name="**/*.odt"/>
                <exclude name="**/*.odg"/>
            </fileset>
        </copy>

        <!-- ReplCache -->
        <copy todir="${build.dir}/replcache">
            <fileset dir="${jgroups.articles.dir}/ReplCache">
                <exclude name="**/*.odt"/>
                <exclude name="**/*.odg"/>
            </fileset>
        </copy>

        <!-- TaskDistribution -->
        <copy todir="${build.dir}/taskdistribution">
            <fileset dir="${jgroups.articles.dir}/TaskDistribution">
                <exclude name="**/*.odt"/>
                <exclude name="**/*.odg"/>
            </fileset>
        </copy>

    </target>

    <target name="copy-manual" if="jgroups.exists" depends="check-jgroups"
            description="Copies the PDF and HTML files from JGroups/doc/manual/build/en to ./build/manual">
        <ant antfile="${jgroups.dir}/build.xml" target="manual" inheritall="false"/>
        <copyDirectory from="${jgroups.dir}/doc/manual/target/docbook/publish/en" to="${build.dir}/manual/"/>
    </target>

    <target name="copy-tutorial" if="jgroups.exists" depends="check-jgroups"
            description="Copies the PDF and HTML files from JGroups/doc/tutorial/build/en to ./build/tutorial">
        <ant antfile="${jgroups.dir}/build.xml" target="tutorial" inheritall="false"/>
        <copyDirectory from="${jgroups.dir}/doc/tutorial/target/docbook/publish/en" to="${build.dir}/tutorial/"/>
    </target>

    <target name="clean" description="Removes generated files and directories">
        <delete dir="${build.dir}" failonerror="false"/>
        <delete>
            <fileset dir="." defaultexcludes="no">
                <include name="**/*~"/>
                <include name="velocity*.log*"/>
            </fileset>
        </delete>
    </target>

    <macrodef name="copyDirectory" description="Copies an entire directory to ./build">
        <attribute name="from"/>
        <attribute name="to" default="${build.dir}/@{from}"/>
        <sequential>
            <echo message="Copying @{from} to @{to}"/>
            <copy todir="@{to}" >
                <fileset dir="@{from}"/>
            </copy>
        </sequential>
    </macrodef>
    
</project>
