<?xml version="1.0"?>



<document>

    <properties>
        <author email="Bela Ban">Bela Ban</author>
        <title>API</title>
    </properties>



<body>


    <section name="Application Programming Interface">
        <p>

            The API of JGroups is very simple. The code is always the same, regardless of the protocol stack used.<p/>

            To be able to send/receive messages, a <i>channel</i> has to be created.
            The reliability of a channel is specified via XML, which then causes
            the creation of the underlying protocol stack. <br/>
            The example below creates a channel and sends/receives 1 message:<br/>

            <br/>

<pre class="code">
      JChannel channel=<b>new JChannel</b>("/home/bela/udp.xml");
      channel.setReceiver(new ReceiverAdapter() {
          public void receive(Message msg) {
              System.out.println("received msg from " + msg.getSrc() + ": " + msg.getObject());
          }
      });
      channel.<b>connect</b>("MyCluster");
      channel.<b>send</b>(new ObjectMessageSerializable(null, "hello world"));
      channel.<b>close</b>();
</pre>

            <p/>

            The channel's configuration is defined in the constructor. In the sample code, we use an XML file
            with an absolute path. If we use a relative path, then the file is looked up on the classpath.
            <p/>

            The XML file contains a list of protocols to be used by the new channel.
            <p/>

            To join a cluster, <b>connect()</b> is called. It returns when the member
            has successfully joined the cluster named "MyCluster", or when it has created
            a new cluster (if it is the first member).
            <p/>

            Then a message is sent using the <b>send()</b> method. A message contains the receiver's address
            (null = all cluster nodes) and a payload. In the example, the string "hello world" is set
            to be the message's contents.
            <p/>

            Since the message is sent to all members, the sender will also receive it.
            This is done via the <b>receive()</b> callback, which was registered with the channel before.
            <p/>

            Finally, the member closes the channel and thus leaves the cluster.
            This results in a notification being sent to all members who are registered
            for membership change notifications.
            <p/>
        </p>
    </section>




</body>
</document>

